name: Build/release

on: push

jobs:
  release:
    runs-on: windows-latest

    if: |
      startsWith(github.ref, 'refs/tags/v') ||
      contains(github.event.head_commit.message, '[release]')

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc

      - name: Download FFmpeg
        shell: pwsh
        run: |
          $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          Invoke-WebRequest -Uri $ffmpegUrl -OutFile ffmpeg.zip
          Expand-Archive ffmpeg.zip -DestinationPath .
          mkdir -p resources/ffmpeg
          copy ffmpeg-master-latest-win64-gpl/bin/ffmpeg.exe resources/ffmpeg/

      - name: Install pnpm
        run: npm i -g pnpm@9

      - name: Fix pnpm
        run: pnpm fix-pnpm-windows

      - name: Get pnpm cache directory path
        id: pnpm-cache-dir-path
        shell: "bash"
        run: echo "dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: pnpm-cache
        with:
          path: ${{ steps.pnpm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install deps
        run: pnpm i --frozen-lockfile --ignore-scripts

      - name: Build Rust Binary
        run: |
          cd whispo-rs
          cargo build --release --target x86_64-pc-windows-msvc
          cd ..
          mkdir -p resources/bin
          copy whispo-rs\target\x86_64-pc-windows-msvc\release\whispo-rs.exe resources\bin\

      - name: Build Electron
        run: pnpm run build

      - name: Build Windows Package
        run: pnpm run build:win
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUBLISH_TOKEN }}
          USE_HARD_LINKS: false

      - name: List Build Output
        shell: pwsh
        run: |
          Write-Host "Checking build output directories..."
          Get-ChildItem -Path release -Recurse -Include *.exe | ForEach-Object {
              Write-Host $_.FullName
          }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: release/*.exe

      - name: Release
        run: pnpm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUBLISH_TOKEN }}
          USE_HARD_LINKS: false
